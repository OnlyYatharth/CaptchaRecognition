#!/usr/bin/env python
# coding: utf-8

# In[2]:


import tensorflow as tf
import matplotlib.pyplot as plt


# In[3]:


mnist = tf.keras.datasets.mnist


# In[15]:


(x_train , y_train) , (x_test , y_test) = mnist.load_data()
x_train = tf.keras.utils.normalize(x_train , axis=1)
x_test = tf.keras.utils.normalize(x_test , axis=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128 , activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(128 , activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(128 , activation=tf.nn.relu))

model.add(tf.keras.layers.Dense(10 , activation=tf.nn.softmax))

model.compile(optimizer = 'adam',
             loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train , y_train , epochs=3)


# In[16]:


val_loss , val_acc = model.evaluate(x_test , y_test)
print(val_loss , val_acc)


# In[13]:


plt.imshow(x_train[0] , cmap = plt.cm.binary)
plt.show()


# In[19]:


model.save('num_recognizer.model')


# In[20]:


new_model = tf.keras.models.load_model('num_recognizer.model')


# In[21]:


predictions = model.predict([x_test])


# In[23]:


print(predictions)


import numpy as np


# In[29]:


print(np.argmax(predictions[101]))


# In[30]:


plt.imshow(x_test[101] , cmap = plt.cm.binary)
plt.show()


# In[ ]:




from PIL import Image , ImageFilter

def imageprepare(argv):
    """
    This function returns the pixel values.
    The imput is a png file location.
    """
    im = Image.open(argv).convert('L')
    width = float(im.size[0])
    height = float(im.size[1])
    newImage = Image.new('L', (28, 28), (255))  # creates white canvas of 28x28 pixels

    if width > height:  # check which dimension is bigger
        # Width is bigger. Width becomes 20 pixels.
        nheight = int(round((20.0 / width * height), 0))  # resize height according to ratio width
        if (nheight == 0):  # rare case but minimum is 1 pixel
            nheight = 1
            # resize and sharpen
        img = im.resize((20, nheight), Image.ANTIALIAS).filter(ImageFilter.SHARPEN)
        wtop = int(round(((28 - nheight) / 2), 0))  # calculate horizontal position
        newImage.paste(img, (4, wtop))  # paste resized image on white canvas
    else:
        # Height is bigger. Heigth becomes 20 pixels.
        nwidth = int(round((20.0 / height * width), 0))  # resize width according to ratio height
        if (nwidth == 0):  # rare case but minimum is 1 pixel
            nwidth = 1
            # resize and sharpen
        img = im.resize((nwidth, 20), Image.ANTIALIAS).filter(ImageFilter.SHARPEN)
        wleft = int(round(((28 - nwidth) / 2), 0))  # caculate vertical pozition
        newImage.paste(img, (wleft, 4))  # paste resized image on white canvas

    # newImage.save("sample.png

    tv = list(newImage.getdata())  # get pixel values

    # normalize pixels to 0 and 1. 0 is pure white, 1 is pure black.
    tva = [(255 - x) * 1.0 / 255.0 for x in tv]
    print(tva)
    return tva

gx=imageprepare(r'C:\Users\Yatharth\Desktop\image2.png')#file path here
print(len(gx))# mnist IMAGES are 28x28=784 pixels

gx1 = np.array(gx)
gx1 = gx1.reshape(28,28)
gx1
plt.imshow(gx1 , cmap = plt.cm.binary)
plt.show()
x_test.shape

from numpy import newaxis
gx1.shape
gx2 = gx1[newaxis, :,:]
gx2.shape
plt.imshow(gx2[0] , cmap = plt.cm.binary)
plt.show()
pp = model.predict(gx2)
print(pp[0])
print(np.argmax(pp[0]))

#End of program

